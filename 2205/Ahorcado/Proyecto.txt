format binary as 'img'
org 7c00h

;Código para leer desde HDD:
MOV AH,0x02	 
MOV AL,0x05	
MOV CH,0x00
MOV CL,0x02	
MOV DH,0x00
MOV DL,0x00	 
MOV BX,0x800	 
MOV ES,BX
MOV BX,0x0000
@@:
	INT 0x13
	JC @b

	MOV	AX,13h
	INT	10h

	
	JMP	8000h	     

times 510-($-$$) db 0
		 dw 0aa55h
org 8000h

XOR AX, AX
XOR BX, BX
XOR CX, CX
XOR DX, DX
XOR SI, SI
XOR DI, DI

MOV AX, 3H ;poner el modo de texto
INT 10H

MOV AX, 0B800H
MOV ES, AX
XOR AX, AX

MOV DX, 0

PLAYER1: ;empieza el primer jugador
;esperamos los datos del teclado por encuesta
CICLO: 
	IN AL, 64H
	TEST AL, 1
	JZ CICLO
	
	IN AL, 60H
	CMP AL, 10H
	JL CICLO
	CMP AL, 32H
	JG CICLO
	CMP AL, 1AH
	JE CICLO
	CMP AL, 1BH
	JE CICLO
	CMP AL, 27H
	JE CICLO
	CMP AL, 28H
	JE CICLO
	
	CMP AL, 1CH
	JE FIN_PLAYER1
	
	INC DX		
	CMP DX, 10	
	JG ERROR
	
	PUSH SI
	CALL VERIFICAR_CARACTER
	POP SI
	MOV [CADENA+SI], AL	 
	INC SI
	CALL PRINT
JMP CICLO

FIN_PLAYER1:	
	MOV AX, 3H
	INT 10H
CLI		
	XOR AX, AX
	MOV ES, AX
	
	MOV AX, RUTINA_TIMER
	MOV [ES:4*8], AX
	MOV [ES:4*8+2], CS

	MOV AX, RUTINA_TECLADO
	MOV [ES:4*9], AX
	MOV [ES:4*9+2], CS
STI

MOV AX, 0B800H
MOV ES, AX

CALL RELLENAR_GUIONES

PLAYER2:
	CALL PRINT_GUIONES
	CALL PRINT_CARAS
	CALL PRINT_TIEMPO
	CMP [CANT_VIDAS], 0
	JLE PERDISTE
	CMP [TIEMPO], 0
	JL PERDISTE
	CALL VICTORIA
JMP PLAYER2	

PERDISTE:
	CALL PRINT_GUIONES
	CALL PRINT_CARAS
	CALL PRINT_TIEMPO
	MOV CX, 8
	MOV DI, 160*3
	MOV SI, 0
	MOV SI, MENSAJE_DERROTA
	XOR AX, AX
	MOV AH, 00001111B
ESCRIBIR1:
	MOV AL, [SI]
	MOV [ES:DI], AX
	INC SI
	ADD DI, 2
LOOP ESCRIBIR1
JMP FIN

GANASTE:
	CALL PRINT_GUIONES
	CALL PRINT_CARAS
	CALL PRINT_TIEMPO
	MOV CX, 7
	MOV DI, 160*3
	MOV SI, 0
	MOV SI, MENSAJE_VICTORIA
	XOR AX, AX
	MOV AH, 00001111B
ESCRIBIR2:
	MOV AL, [SI]
	MOV [ES:DI], AX
	INC SI
	ADD DI, 2
LOOP ESCRIBIR2

FIN:
jmp $

;------ETIQUETAS------

ERROR:	
	MOV CX, 23
	XOR AX, AX
	MOV AX, 3H
	INT 10H
	MOV SI, MENSAJE_ERROR
ESCRIBIR:
	MOV AX, AX
	MOV AL, [SI]
	MOV AH, 00001111B
	MOV [ES:DI], AX
	ADD DI, 2
	INC SI
LOOP ESCRIBIR

TECLA_ENTER:	
	IN AL, 64H
	TEST AL, 1
	JZ TECLA_ENTER
	IN AL, 60H
	CMP AL, 1CH
	JNE TECLA_ENTER
	XOR AX, AX
	MOV AX, 3H
	INT 10H
	MOV CX, 10
	XOR AX, AX
	XOR DI, DI
	MOV SI, 0
	MOV DX, 0
LIMPIAR:	 
	MOV AL, [ESTADO_VACIO]
	MOV [CADENA+SI], AL
	INC SI
LOOP LIMPIAR
	XOR AL, AL
	XOR SI, SI
	XOR DX, DX
JMP CICLO

PRINT:		
	MOV AH, 00001111B
	MOV [ES:DI], AX 
	ADD DI, 2
RET

RELLENAR_GUIONES:
	MOV CX, DX
	MOV SI, 0
CICLO0:
	MOV AL, '_'
	MOV [GUIONES+SI], AL
	INC SI
LOOP CICLO0
RET

PRINT_GUIONES:
	MOV AH, 00001111B
	MOV CX, DX
	MOV DI, 0
	MOV SI, 0
CICLO1:
	MOV AL, [GUIONES+SI]
	MOV [ES:DI], AX
	ADD DI, 4
	INC SI
LOOP CICLO1
RET

PRINT_CARAS:
PRINT_MUERTES:
	MOV AH, 00001100B
	MOV CX, 5
	MOV DI, 160
	MOV SI, 0
CICLO2:
	MOV AL, [MUERTE+SI]
	MOV [ES:DI], AX
	INC SI
	ADD DI, 2
	CMP SI, 4
	JL CICLO2
	MOV SI, 0
LOOP CICLO2

PRINT_VIDAS:
	MOV SI, CANT_VIDAS
	MOV AL, [SI]
	CMP AL, 1
	JL IGNORAR
	XOR AH, AH
	MOV CX, AX
	XOR AX, AX
	MOV AH, 00001010B
	MOV DI, 160
	MOV SI, 0
CICLO3:
	MOV AL, [VIDA+SI]
	MOV [ES:DI], AX
	INC SI
	ADD DI, 2
	CMP SI, 4
	JL CICLO3
	MOV SI, 0
LOOP CICLO3
IGNORAR:
RET

PRINT_TIEMPO:		 
	CMP [TIC], 18
	JE CICLO4
	JMP PRINT_TIEMPO
CICLO4:
	MOV SI, TIEMPO
	MOV DI, 160*2
	MOV BH, 00001111B
	MOV AL, [SI]
	AAM
	ADD AX, 3030H
	MOV BL, AH
	MOV [ES:DI], BX
	MOV BL, AL
	MOV [ES:DI+2], BX
	DEC [TIEMPO]
	MOV [TIC], 0
RET

VERIFICAR_CARACTER:	
	XOR AH, AH
	MOV SI, AX
	XOR AX, AX
	MOV AL, [CARACTERES+SI]
RET

VICTORIA:	
	MOV [CORRECTAS], 0
	MOV SI, 0
	XOR AX, AX
	MOV CX, DX
COMPARAR:
	MOV AL, [CADENA+SI]
	MOV AH, [GUIONES+SI]
	CMP AL, AH
	JNE COMPROBAR_CORRECTAS
	INC [CORRECTAS]
	INC SI
LOOP COMPARAR
COMPROBAR_CORRECTAS:
	XOR AH, AH
	MOV SI, 0
	MOV AL, [CORRECTAS+SI]
	CMP AX, DX
	JE GANASTE
RET

COMPROBAR:	
	MOV [ACIERTO], 0
	MOV SI, 0
	MOV SI, CADENA
	MOV DI, 0
	MOV DI, GUIONES
	MOV CX, DX
PASO1:
	CMP AL, [SI]
	JNE PASO2
	MOV [DI], AL
	INC SI
	INC DI
	INC [ACIERTO]
	JMP PASO2.1
PASO2:
	INC SI
	INC DI
PASO2.1:
LOOP PASO1
	XOR SI, SI
PASO3:
	CMP [ACIERTO], 0
	JNE PASO_FIN
	DEC [CANT_VIDAS]
PASO_FIN:
RET

;------SUBRUTINAS------

RUTINA_TIMER:
	CLI
	PUSH AX
	INC [TIC]
	MOV AL, 20H
	OUT 20H, AL
	POP AX
	STI
IRET

RUTINA_TECLADO:
	CLI
	PUSH AX
	IN AL, 60H
	CMP AL, 127
	JA FIN_TECLADO
	CALL VERIFICAR_CARACTER
	;CALL REVISAR_USADAS
	CALL COMPROBAR
	FIN_TECLADO:
	MOV AL, 20H
	OUT 20H, AL
	POP AX
	STI
IRET

;------VARIABLES------

CADENA DB 10 DUP(?)
GUIONES DB 10 DUP(?)
ESTADO_VACIO DB 1 DUP(?)
VIDA DB '(:D)'
MUERTE DB '(XO)'
TIC DB 0
TIEMPO DB 60

CARACTERES DB '0123456789000000qwertyuiop0000asdfghjkl00000zxcvbnm'

CORRECTAS DB 0
ACIERTO DB 0

CANT_VIDAS DB 6
MENSAJE_VICTORIA DB 'YOU WIN'
MENSAJE_DERROTA DB 'YOU LOSE'
MENSAJE_ERROR DB 'Palabra demaciado larga'

times (5*512)-($-$$) db 0 ; para usar mas de un sector y saltar la limitante de 512 bytes
dw 0xaa55